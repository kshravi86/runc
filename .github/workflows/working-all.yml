name: Run-C iPad Screenshot

on:
  workflow_dispatch:
    inputs:
      device:
        description: "Simulator device name"
        required: false
        default: "iPad Pro 13-inch (M4)"

jobs:
  simshot:
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Build app for Simulator (Debug)
        run: |
          set -euo pipefail
          DEVICE_NAME='${{ inputs.device }}'
          xcodebuild -resolvePackageDependencies -project Run-C.xcodeproj -scheme 'Run-C' -clonedSourcePackagesDirPath "$RUNNER_TEMP/SPM"
          xcodebuild -project Run-C.xcodeproj \
            -scheme 'Run-C' \
            -configuration Debug \
            -destination "platform=iOS Simulator,name=${DEVICE_NAME},OS=latest" \
            -derivedDataPath "$RUNNER_TEMP/DerivedData" \
            CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO \
            ONLY_ACTIVE_ARCH=YES ARCHS=arm64 EXCLUDED_ARCHS=arm64e \
            build | xcpretty
          APP_DIR=$(find "$RUNNER_TEMP/DerivedData/Build/Products/Debug-iphonesimulator" -type d -name "*.app" -maxdepth 1 | head -n1 || true)
          if [ -z "$APP_DIR" ]; then echo "::error::No simulator .app found"; exit 1; fi
          echo "APP_DIR=$APP_DIR" >> $GITHUB_ENV

      - name: Take simulator screenshot (single)
        run: |
          set -euo pipefail
          mkdir -p sim_screenshots
          DEVICE_NAME='${{ inputs.device }}'
          UDID=$(xcrun simctl list devices | grep -F "${DEVICE_NAME}" | head -n1 | sed -E 's/.*\(([A-F0-9-]+)\).*/\1/' || true)
          if [ -z "$UDID" ]; then echo "::error::Device not found: $DEVICE_NAME"; xcrun simctl list devices; exit 1; fi
          xcrun simctl boot "$UDID" || true
          xcrun simctl bootstatus "$UDID" -b
          xcrun simctl install "$UDID" "$APP_DIR"
          # Launch Run-C and prepare the main screen for a clean screenshot.
          BUNDLE_ID="com.murugan.guha"
          xcrun simctl terminate "$UDID" "$BUNDLE_ID" || true
          # Pass an optional flag we support to auto-run a sample for a lively screenshot.
          xcrun simctl launch "$UDID" "$BUNDLE_ID" -- --auto-run || true
          # Give the app a moment to settle before capturing.
          sleep 5
          OUT="sim_screenshots/RunC_iPadSim.png"
          xcrun simctl io "$UDID" screenshot "$OUT"
          if [ ! -f "$OUT" ]; then echo "::error::Failed to create $OUT"; exit 1; fi
          echo "Created: $OUT"

      - name: Upload Screenshot Artifact
        uses: actions/upload-artifact@v4
        with:
          name: RunC-iPadSim-Screenshot
          path: sim_screenshots
